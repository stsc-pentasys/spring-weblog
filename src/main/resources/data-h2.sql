INSERT INTO WL_USER (USER_ID, FIRST_NAME, LAST_NAME, EMAIL_ADDRESS) VALUES
  ('martin', 'Martin', 'Fauler', 'martin_f@gmx.de'),
  ('kent', 'Kent', 'Baeck', 'kent.baeck@gmail.com'),
  ('nat', 'Nat', 'Preiss', 'nathan@web.de'),
  ('gojko', 'Gojko', 'Azitsch', 'gojko@azitsch.org');

INSERT INTO WL_BLOG_ENTRY (ENTRY_ID, TITLE, CONTENT, AUTHOR_ID, CREATED) VALUES
  ('is-tdd-dead', 'Is TDD Dead?', 'David Heinemeier Hansson, the creator of Ruby on Rails, gave a keynote at RailsConf where he declared that TDD is Dead. This caused a predictably large amount of controversy in both the Rails and wider software development community. It also led to some interesting conversations between David, Kent, and myself. We decided that these conversations were interesting enough that others might like to watch them too, so recorded a series of video hangouts where we discuss the role of TDD in software development.', 1, PARSEDATETIME('2015-03-30 16:32:57', 'yyyy-MM-dd hh:mm:ss')),
  ('goto-fail-heartbleed-and-unit-testing-culture', 'Goto Fail, Heartbleed, and Unit Testing Culture', 'Two computer security flaws were discovered in early 2014: Apple''s "goto fail" bug and OpenSSL''s "Heartbleed" bug. Both had the potential for widespread and severe security failures, the full extent of which we may never know. Given their severity, it is important for the software development profession to reflect on how they could have been detected so we can improve our ability to prevent these kinds of defects in the future. This article considers the role unit testing could play, showing how unit tests, and more importantly a unit testing culture, could have identified these particular bugs. It goes on to look at the costs and benefits of such a culture and describes how such a culture was instilled at Google.', 1, PARSEDATETIME('2015-03-15 11:22:57', 'yyyy-MM-dd hh:mm:ss')),
  ('the-dependency-injection-pattern', 'The Dependency Injection Pattern', 'In the Java community there''s been a rush of lightweight containers that help to assemble components from different projects into a cohesive application. Underlying these containers is a common pattern to how they perform the wiring, a concept they refer under the very generic name of "Inversion of Control". In this article I dig into how this pattern works, under the more specific name of "Dependency Injection", and contrast it with the Service Locator alternative. The choice between them is less important than the principle of separating configuration from use.', 1, PARSEDATETIME('2015-02-03 09:17:57', 'yyyy-MM-dd hh:mm:ss')),
  ('an-appropriate-use-of-metrics', 'An Appropriate Use of Metrics', 'Management love their metrics. The thinking goes something like this, "We need a number to measure how we''re doing. Numbers focus people and help us measure success." Whilst well intentioned, management by numbers unintuitively leads to problematic behavior and ultimately detracts from broader project and organizational goals. Metrics inherently aren''t a bad thing; just often, inappropriately used.', 1, PARSEDATETIME('2015-03-27 11:75:57', 'yyyy-MM-dd hh:mm:ss')),
  ('rip-tdd', 'RIP TDD', 'Separate interface from implementation thinking. I have a tendency to pollute API design decisions with implementation speculation. I need to find a new way to separate the two levels of thinking while still providing rapid feedback between them.', 2, PARSEDATETIME('2015-02-27 23:01:57', 'yyyy-MM-dd hh:mm:ss')),
  ('don-t-cross-the-beams', 'Don’t Cross the Beams', 'As many of my pair programming partners could tell you, I have the annoying habit of saying "Stop thinking" during refactoring. I''ve always known this isn''t exactly what I meant, because I can’''t mean it literally, but I''ve never had a better explanation of what I meant until now.', 2, PARSEDATETIME('2015-01-30 12:41:57', 'yyyy-MM-dd hh:mm:ss')),
  ('tdd-is-kanban-for-code', 'TDD is Kanban for Code', 'The other night Cynthia and I were having drinks in the Tower Bar of the Hotel Hafen in Hamburg (highly recommend for the view if not the service) with Henning Wolf and Arne Roock of it-agile when I casually mentioned that test-driven development was kanban for code.', 2, PARSEDATETIME('2015-01-05 08:08:57', 'yyyy-MM-dd hh:mm:ss')),
  ('decoupling-junit-and-hamcrest', 'Decoupling JUnit and Hamcrest', 'Evolution of Hamcrest and JUnit has been complicated by the dependencies between the two projects. If they can be decoupled, both projects can move forward with less coordination required between the development teams. To that end, we''ve come up with a plan to allow JUnit to break its dependency on Hamcrest.', 3, PARSEDATETIME('2014-12-27 21:09:57', 'yyyy-MM-dd hh:mm:ss')),
  ('exploring-test-driven-development-with-quickcheck', 'Exploring Test-Driven Development with QuickCheck', 'When TDD was introduced in the late 1990s, it was described in terms of example-based testing tools, such as the xUnit family of frameworks. Since then, property-based testing tools, such as QuickCheck, have become available for all major languages (and many minor ones). But you wouldn''t think so if you read most of what is written about TDD & BDD.', 3, PARSEDATETIME('2014-11-27 14:49:57', 'yyyy-MM-dd hh:mm:ss')),
  ('explore-capabilities-not-features', 'Explore capabilities, not features', 'Exploratory testing requires a clear mission. The mission statement provides focus and enables teams to triage what is important and what is out of scope. A clear mission prevents exploratory testing sessions turning into unstructured playing with the system. As software features are implemented, and user stories get ready for exploratory testing, it’s only logical to set the mission for exploratory testing sessions around new stories or changed features.', 4, PARSEDATETIME('2013-12-06 17:10:57', 'yyyy-MM-dd hh:mm:ss'));